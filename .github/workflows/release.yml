name: Build pyMSscreen App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-platform:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        arch: [x64]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    name: Build (${{ matrix.os }})
    timeout-minutes: 90

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11 Environment
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate || source venv/Scripts/activate || echo "venv active"

          ./venv/bin/pip install -r requirements.txt || ./venv/Scripts/pip.exe install -r requirements.txt
          ./venv/bin/pip install pyinstaller pyinstaller-hooks-contrib || ./venv/Scripts/pip.exe install pyinstaller pyinstaller-hooks-contrib

          echo "🔍 Installing pyopenms and rdkit for platform: ${{ matrix.os }}"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./venv/Scripts/pip.exe install wheels/pyopenms-3.3.0-cp311-cp311-win_amd64.whl
            ./venv/Scripts/pip.exe install wheels/rdkit_pypi-2022.9.5-cp311-cp311-win_amd64.whl

          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            ./venv/bin/pip install wheels/pyopenms-3.3.0-cp311-cp311-macosx_14_0_arm64.whl
            ./venv/bin/pip install wheels/rdkit_pypi-2022.9.5-cp311-cp311-macosx_11_0_arm64.whl

          elif [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            ./venv/bin/pip install wheels/pyopenms-3.3.0-cp311-cp311-manylinux_2_28_x86_64.whl
            ./venv/bin/pip install wheels/rdkit_pypi-2022.9.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
          fi

      - name: Build Backend Binary
        shell: bash
        run: |
          PYINSTALLER_COMMON="--clean --log-level DEBUG --onefile --name web_app web_app.py \
            --collect-all rdkit --collect-all flask --collect-all pandas --collect-all plotly \
            --collect-all numpy --collect-submodules numpy"

          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            WHEEL_LIB_PATH="venv/lib/python3.11/site-packages/pyopenms"
            ADD_BINARIES=""
            for lib in "$WHEEL_LIB_PATH"/*.dylib; do
              [[ -f "$lib" ]] && ADD_BINARIES+=" --add-binary $lib:."
            done
            OPENMS_DATA_PATH="$WHEEL_LIB_PATH/share/OpenMS"
            ADD_DATAS="--add-data=${OPENMS_DATA_PATH}:share/OpenMS"
            ./venv/bin/pyinstaller $PYINSTALLER_COMMON $ADD_BINARIES $ADD_DATAS
            mv dist/web_app ./web_app

          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            WHEEL_LIB_PATH="venv/Lib/site-packages/pyopenms"
            ADD_BINARIES=""
            for dll in OpenMS.dll OpenSwathAlgo.dll Qt5Core.dll Qt5Network.dll concrt140.dll \
                         msvcp140.dll msvcp140_1.dll msvcp140_2.dll msvcp140_atomic_wait.dll \
                         msvcp140_codecvt_ids.dll vcruntime140.dll vcruntime140_1.dll vcomp140.dll; do
              DLL_PATH="$WHEEL_LIB_PATH\\$dll"
              [[ -f "$DLL_PATH" ]] && ADD_BINARIES+=" --add-binary $DLL_PATH:."
            done
            OPENMS_DATA_PATH="$WHEEL_LIB_PATH\\share\\OpenMS"
            ADD_DATAS="--add-data=${OPENMS_DATA_PATH};share\\OpenMS"
            ./venv/Scripts/pyinstaller.exe $PYINSTALLER_COMMON $ADD_BINARIES $ADD_DATAS
            mv dist/web_app.exe ./web_app.exe

          elif [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            ./venv/bin/pyinstaller $PYINSTALLER_COMMON --hidden-import pyopenms --collect-all pyopenms
            mv dist/web_app ./web_app
          fi

          echo " Checking for final binary:"
          ls -l ./web_app* || true

      - name: Launch Backend
        shell: bash
        run: |
          echo " Launching backend on: ${{ matrix.os }}"

          BIN="./web_app"
          [[ "${{ matrix.os }}" == "windows-latest" ]] && BIN="./web_app.exe"

          export OPENMS_DATA_PATH=share/OpenMS
          [[ "${{ matrix.os }}" == "windows-latest" ]] && export OPENMS_DATA_PATH=share\\OpenMS

          chmod +x "$BIN" || true
          "$BIN" &

          echo "⏳ Waiting for backend to start on 127.0.0.1:5000..."
          sleep 2
          npx wait-on --timeout=180000 --interval=5000 http://127.0.0.1:5000 || {
            echo "Backend failed to start within timeout."; exit 1;
          }
          echo " Backend is live!"

      - name: Install Playwright Test Runner (backend readiness)
        run: npm install -D playwright @playwright/test

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright Test (backend readiness)
        run: npm run test:playwright

      - name: Build Frontend +  Electron App
        run:  npm run build:app -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Smoke Test Electron App EXE
        if: matrix.os == 'windows-latest' 
        shell: cmd
        run: |
           echo " Checking for EXE..."
           if not exist dist\\pyms-win32-x64.exe (
            echo  EXE not found!
            dir dist
            exit /b 1
           )
           echo "Launching EXE for smoke test..."
           start "" dist\\pyms-win32-x64.exe
           timeout /t 10 >nul

           echo " Checking backend log for runtime errors..."
           set "LOGFILE=%USERPROFILE%\\AppData\\Roaming\\pyms-app\\flask-backend.log"
           if not exist "%LOGFILE%" (
            echo  Log file not found. App may have failed silently.
            exit /b 1
           )

           echo "📄 Scanning log file: %LOGFILE%"
           findstr /i "error exception uncaught syntax reference type fatal failed" "%LOGFILE%"
           if %errorlevel% equ 0 (
            echo  Detected a JavaScript runtime error in log!
            echo "------ LOG START ------"
            type "%LOGFILE%"
            echo "------ LOG END --------"
            exit /b 1
           )

           echo " Killing Electron App (if running)..."
           taskkill /f /im pyms-win32-x64.exe || echo "Not running"

           echo " EXE passed runtime test with no fatal errors."

           


      - name: Upload Platform Bundle
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            public/backend/
            dist/
            release/
            out/
            *.exe
            *.AppImage
            *.dmg

  release:
    needs: build-platform
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: bundles/

      - name: List Bundles
        run: |
          echo "📦 Final App Bundles:"
          ls -R bundles/
