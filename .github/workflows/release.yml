name: Build pyMSscreen App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-platform:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    name: Build (${{ matrix.os }})
    timeout-minutes: 90

    steps:
      # Checkout the code from GitHub
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Micromamba for managing Python environments
      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: environment.core.yml
          environment-name: backend
          init-shell: bash
          cache-environment: true
          cache-downloads: true
          cache-environment-key: env-${{ matrix.os }}-${{ hashFiles('environment.core.yml') }}
          cache-downloads-key: pkgs-${{ matrix.os }}-${{ hashFiles('environment.core.yml') }}

      # Install Python dependencies
      - name: Install Python dependencies
        shell: bash
        run: |
          micromamba run -n backend pip install -r requirements.txt
          micromamba run -n backend pip install pyinstaller
          echo "üîç Installing pyopenms per platform..."
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
             micromamba install -n backend -c bioconda -c conda-forge pyopenms
             micromamba install -n backend -c conda-forge rdkit
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
             micromamba run -n backend pip install wheels/pyopenms-3.3.0-cp312-cp312-win_amd64.whl             
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
             micromamba run -n backend pip install wheels/pyopenms-3.3.0-cp312-cp312-macosx_14_0_arm64.whl
          fi

      # Build Backend Binary for Linux
      - name: Build Python script into a stand-alone binary (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          echo "üì¶ Building stand-alone binary for Ubuntu"
          micromamba run -n backend pyinstaller --onefile --name web_app web_app.py
          # Create public/backend directory and move the binary
          mkdir -p public/backend
          mv ./dist/web_app public/backend/web_app_linux
          echo "üìÇ Listing contents of public/backend:"
          ls -l public/backend/

      # Build Backend Binary for macOS
      - name: Build Python script into a stand-alone binary (macOS)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          echo "üì¶ Building stand-alone binary for macOS"
          micromamba run -n backend pyinstaller --onefile --name web_app web_app.py
          # Create public/backend directory and move the binary
          mkdir -p public/backend
          mv ./dist/web_app public/backend/web_app_macos
          echo "üìÇ Listing contents of public/backend:"
          ls -l public/backend/

      # Build Backend Binary for Windows
      - name: Build Python script into a stand-alone binary (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          echo "üì¶ Building stand-alone binary for Windows"
          micromamba run -n backend pyinstaller --onefile --name web_app web_app.py
          # Create public/backend directory and move the binary
          mkdir -p public/backend
          mv ./dist/web_app.exe public/backend/web_app_windows.exe
          echo "üìÇ Listing contents of public/backend:"
          ls -l public/backend/

      # Install Frontend Dependencies
      - name: Install Frontend Dependencies
        run: npm ci

      # Build React App
      - name: Build React App
        run: npm run build

      # Launch Backend for each platform
      - name: Launch Backend (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          echo "Launching Backend for Linux"
          ./dist/web_app &
          npx wait-on http://localhost:5000

      - name: Launch Backend (macOS)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          echo "Launching Backend for macOS"
          ./dist/web_app &
          npx wait-on http://localhost:5000

      - name: Launch Backend (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          echo "Launching Backend for Windows"
          start /B dist\\\\web_app\\\\web_app.exe
          npx wait-on http://localhost:5000

      # Run Playwright Test for backend readiness
      - name: Run Playwright Test (backend readiness)
        run: npm run test:playwright

      # Build Electron App
      - name: Build Electron App
        run: npm run build:electron -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      # Upload Platform Bundle
      - name: Upload Platform Bundle
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            public/backend/
            dist/
            release/
            out/
            *.exe
            *.AppImage
            *.dmg

  release:
    needs: build-platform
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: bundles/

      - name: List Bundles
        run: |
          echo "üì¶ Final App Bundles:"
          ls -R bundles/
