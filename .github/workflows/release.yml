name: Build pyMSscreen App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-platform:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        arch: [x64]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    name: Build (${{ matrix.os }})
    timeout-minutes: 90

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11 Environment
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate || source venv/Scripts/activate

          pip install -r requirements.txt
          pip install pyinstaller pyinstaller-hooks-contrib

          echo "üîç Installing pyopenms and rdkit for platform: ${{ matrix.os }}"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pip install wheels/pyopenms-3.3.0-cp311-cp311-win_amd64.whl
            pip install wheels/rdkit_pypi-2022.9.5-cp311-cp311-win_amd64.whl

          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            pip install wheels/pyopenms-3.3.0-cp311-cp311-macosx_14_0_arm64.whl
            pip install wheels/rdkit_pypi-2022.9.5-cp311-cp311-macosx_11_0_arm64.whl

          elif [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            pip install wheels/pyopenms-3.3.0-cp311-cp311-manylinux_2_28_x86_64.whl
            pip install wheels/rdkit_pypi-2022.9.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
          fi

      - name: Build Backend Binary
        shell: bash
        run: |
          source venv/bin/activate || source venv/Scripts/activate

          PYINSTALLER_COMMON="--clean --log-level DEBUG --onefile --name web_app web_app.py --collect-all rdkit --collect-all flask --collect-all pandas"

          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "üõ†Ô∏è macOS build with dynamic shared libraries"
            WHEEL_LIB_PATH="venv/lib/python3.11/site-packages/pyopenms"
            ADD_BINARIES=""
            for lib in "$WHEEL_LIB_PATH"/*.dylib; do
              [[ -f "$lib" ]] && ADD_BINARIES+=" --add-binary $lib:."
            done
            OPENMS_DATA_PATH="$WHEEL_LIB_PATH/share/OpenMS"
            ADD_DATAS="--add-data=${OPENMS_DATA_PATH}:share/OpenMS"
            pyinstaller $PYINSTALLER_COMMON $ADD_BINARIES $ADD_DATAS
            mv dist/web_app ./web_app

          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "üõ†Ô∏è Windows build with pyopenms DLLs"
            WHEEL_LIB_PATH="venv/Lib/site-packages/pyopenms"
            ADD_BINARIES=""
            for dll in OpenMS.dll OpenSwathAlgo.dll Qt5Core.dll Qt5Network.dll concrt140.dll \
                       msvcp140.dll msvcp140_1.dll msvcp140_2.dll msvcp140_atomic_wait.dll \
                       msvcp140_codecvt_ids.dll vcruntime140.dll vcruntime140_1.dll vcomp140.dll; do
              DLL_PATH="$WHEEL_LIB_PATH/$dll"
              [[ -f "$DLL_PATH" ]] && ADD_BINARIES+=" --add-binary $DLL_PATH:."
            done
            pyinstaller $PYINSTALLER_COMMON $ADD_BINARIES
            mv dist/web_app.exe ./web_app.exe

          elif [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            echo "üõ†Ô∏è Standard Linux build"
            pyinstaller $PYINSTALLER_COMMON --hidden-import pyopenms --collect-all pyopenms
            mv dist/web_app ./web_app
          fi

          echo "üîç Checking for final binary:"
          ls -l ./web_app* || true
          BIN="./web_app"
          [[ "${{ matrix.os }}" == "windows-latest" ]] && BIN="./web_app.exe"
          [[ -f "$BIN" ]] && echo "‚úÖ Binary build success: $BIN" || { echo "‚ùå Binary missing!"; exit 1; }

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ matrix.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-node-

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Install Playwright (required for tests)
        run: npx playwright install --with-deps

      - name: Build React App
        run: npm run build

      - name: Launch Backend
        shell: bash
        run: |
          source venv/bin/activate || source venv/Scripts/activate
          echo "üöÄ Launching backend on: ${{ matrix.os }}"
          BIN="./web_app"
          [[ "${{ matrix.os }}" == "windows-latest" ]] && BIN="./web_app.exe"
          chmod +x "$BIN"
          "$BIN" &
          echo "‚è≥ Waiting for backend to start..."
          npx wait-on --timeout=120000 http://localhost:5000 || { echo "‚ùå Backend failed to start!"; exit 1; }
          echo "‚úÖ Backend is live!"

      - name: Run Playwright Test (backend readiness)
        run: npm run test:playwright

      - name: Build Electron App
        run: npm run build:electron -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload Platform Bundle
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            public/backend/
            dist/
            release/
            out/
            *.exe
            *.AppImage
            *.dmg

  release:
    needs: build-platform
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: bundles/

      - name: List Bundles
        run: |
          echo "üì¶ Final App Bundles:"
          ls -R bundles/
