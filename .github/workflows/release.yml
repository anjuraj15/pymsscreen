name: Build pyMSscreen App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-platform:
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-latest]
        arch: [x64]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    name: Build (${{ matrix.os }})
    timeout-minutes: 90

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        continue-on-error: true
        with:
          environment-file: environment.core.yml
          environment-name: backend
          init-shell: bash
          cache-environment: true
          cache-downloads: true
          cache-environment-key: env-${{ matrix.os }}-${{ hashFiles('environment.core.yml') }}
          cache-downloads-key: pkgs-${{ matrix.os }}-${{ hashFiles('environment.core.yml') }}

      - name: Install Python dependencies
        shell: bash
        run: |
          micromamba activate backend          
          
          # Common dependencies from pip
          micromamba run -n backend pip install -r requirements.txt pyinstaller pyinstaller-hooks-contrib

          # Platform-specific pyopenms and rdkit setup
          echo "üîç Installing pyopenms and rdkit for platform: ${{ matrix.os }}"

          if [[ "${{ matrix.os }}" == "ubuntu-20.04" ]]; then
             
             micromamba install -n backend -c conda-forge -c bioconda pyopenms=3.3.0 -y

          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then

             micromamba run -n backend pip install wheels/pyopenms-3.3.0-cp312-cp312-win_amd64.whl             
            
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then

             micromamba run -n backend pip install wheels/pyopenms-3.3.0-cp312-cp312-macosx_14_0_arm64.whl

          else
             echo "‚ö†Ô∏è pyopenms not installed: unknown platform"
          fi

      
      - name: Build Backend Binary
        shell: bash
        run: |
          echo "üì¶ Building PyInstaller binary for: ${{ matrix.os }}"

          micromamba activate backend

          #   Define common variables
          PYINSTALLER_COMMON="--clean --log-level DEBUG --onefile --name web_app web_app.py --collect-all rdkit --collect-all flask --collect-all pandas"
          
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "üõ†Ô∏è macOS build with dynamic shared libraries"
            WHEEL_LIB_PATH="${MAMBA_ROOT_PREFIX:-$HOME/micromamba}/envs/backend/lib/python3.12/site-packages/pyopenms"

            ADD_BINARIES=""
            echo "üîç Scanning for dylibs in: $WHEEL_LIB_PATH"
            for lib in "$WHEEL_LIB_PATH"/*.dylib; do
              if [[ -f "$lib" ]]; then
                echo "‚úÖ Adding $(basename "$lib")"
                ADD_BINARIES+=" --add-binary $lib:."
              fi
            done

            OPENMS_DATA_PATH="$WHEEL_LIB_PATH/share/OpenMS"
            ADD_DATAS="--add-data \"$OPENMS_DATA_PATH:share/OpenMS\""
            echo "üìÅ OpenMS data path: $OPENMS_DATA_PATH"

            micromamba run -n backend pyinstaller $PYINSTALLER_COMMON $ADD_BINARIES $ADD_DATAS
 
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "üõ†Ô∏è Windows build with specified pyopenms DLLs"
            WHEEL_LIB_PATH="${MAMBA_ROOT_PREFIX:-$HOME/micromamba}/envs/backend/Lib/site-packages/pyopenms"

            ADD_BINARIES=""
            for dll in \
              OpenMS.dll \
              OpenSwathAlgo.dll \
              Qt5Core.dll \
              Qt5Network.dll \
              concrt140.dll \
              msvcp140.dll \
              msvcp140_1.dll \
              msvcp140_2.dll \
              msvcp140_atomic_wait.dll \
              msvcp140_codecvt_ids.dll \
              vcruntime140.dll \
              vcruntime140_1.dll \
              vcomp140.dll; do

              DLL_PATH="$WHEEL_LIB_PATH/$dll"
              if [[ -f "$DLL_PATH" ]]; then
                echo "‚úÖ Adding $dll"
                ADD_BINARIES+=" --add-binary $DLL_PATH:."
              else
                echo "‚ö†Ô∏è Missing $dll"
              fi
            done

            micromamba run -n backend pyinstaller $PYINSTALLER_COMMON $ADD_BINARIES

          elif [[ "${{ matrix.os }}" == "ubuntu-20.04" ]]; then
            echo "üõ†Ô∏è Ubuntu build using standard PyInstaller options"
            micromamba run -n backend pyinstaller $PYINSTALLER_COMMON \
               --hidden-import pyopenms \
               --collect-all pyopenms

          else
            echo "‚ö†Ô∏è Unsupported OS: ${{ matrix.os }}"
            exit 1
          fi

          
          # Debugging Step: Check if dist/ directory exists after PyInstaller build
          echo "üîç Checking dist/ directory after PyInstaller build:"
          ls -l ./dist

          # Check if the `web_app` binary is in the dist/web_app directory
          
          if [[ -f "./dist/web_app" || -f "./dist/web_app.exe" ]]; then
            echo "‚úÖ Binary build success."
          else
            echo "‚ùå Binary missing after build!"
            exit 1
          fi
      

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ matrix.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-node-

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Install Playwright (required for tests)
        run: npx playwright install --with-deps

      - name: Build React App
        run: npm run build

      - name: Launch Backend
        shell: bash
        run: |
           
          MATRIX_OS="${{ matrix.os }}"
          echo "üöÄ Launching backend on: ${MATRIX_OS}"
          
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            chmod +x dist/web_app_macos-latest
            ./dist/web_app_macos-latest &
          elif [[ "${{ matrix.os }}" == "ubuntu-20.04" ]]; then
            chmod +x dist/web_app_ubuntu-20.04
            ./dist/web_app_ubuntu-20.04 &
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./dist/web_app_windows-latest.exe &
          else
            echo "‚ö†Ô∏è Unsupported OS: ${{ matrix.os }}"
            exit 1
          fi


          # Wait for backend to be available
          echo "‚è≥ Waiting for backend to start..."
          npx wait-on --timeout=120000 http://localhost:5000 || {
            echo "‚ùå Backend failed to start within timeout period!"
            exit 1
          }

          echo "‚úÖ Backend successfully launched and ready!"

      - name: Run Playwright Test (backend readiness)
        run: npm run test:playwright

      - name: Build Electron App
        run: npm run build:electron -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload Platform Bundle
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            public/backend/
            dist/
            release/
            out/
            *.exe
            *.AppImage
            *.dmg

  release:
    needs: build-platform
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: bundles/

      - name: List Bundles
        run: |
          echo "üì¶ Final App Bundles:"
          ls -R bundles/
