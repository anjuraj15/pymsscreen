name: Build Electron App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: environment.core.yml
          environment-name: backend
          init-shell: bash
          cache-environment: true
          cache-downloads: true

      - name: Install pip-only dependencies + pyinstaller
        working-directory: ${{ github.workspace }}
        run: |
          micromamba run -n backend pip install -r requirements.txt
          micromamba run -n backend pip install pyinstaller

      - name: Build Flask Backend Binary
        run: |
          micromamba run -n backend pyinstaller --clean --log-level DEBUG --onefile --name web_app web_app.py
          mkdir -p backend-out
          mv dist/web_app backend-out/web_app_linux  # For Linux; adjust if needed

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web_app_binary
          path: backend-out/

  build-frontend:
    needs: build-backend
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ‚úÖ Download backend binary built earlier
      - name: Download Backend Binary
        uses: actions/download-artifact@v4
        with:
         name: web_app_binary
         path: public/backend/

      # ‚úÖ Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: electron-app/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('electron-app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # ‚úÖ Cache Playwright browser binaries
      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('electron-app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # ‚úÖ Install Node dependencies fast
      - name: Install Frontend Dependencies
        run: npm ci

      # ‚úÖ Build React/Vite frontend
      - name: Build React App
        run: npm run build

      # ‚úÖ Debug app contents
      - name: Debug App Folder
        run: |
          echo "üìÇ Listing dist/"
          ls -la dist || echo "‚ö†Ô∏è dist/ not found yet"
          echo "üìÇ Listing electron/"
          ls -la electron || echo "‚ö†Ô∏è electron/ not found"
          echo "üìÇ Current directory:"
          pwd

      # ‚úÖ Install Playwright for E2E testing
      - name: Install Playwright and Browsers
        run: |
          npm install --save-dev playwright @playwright/test
          npx playwright install chromium  # üí° only chromium to speed it up
        shell: bash

      # ‚úÖ (Linux only) System deps for Playwright GUI support
      - name: Install Playwright Browser Deps (Linux only)
        if: runner.os == 'Linux'
        run: npx playwright install-deps

      # ‚úÖ Run Playwright UI tests
      - name: Run Playwright Tests
        run: npm run test:playwright
        env:
          CI: true

      # ‚úÖ Build the Electron app
      - name: Build Electron App
        run: npm run build:electron -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      # ‚úÖ Upload final packaged app (cross-platform)
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/
            release/
            out/
            *.exe
            *.AppImage
            *.dmg
