name: Build Electron App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
	  with:
	    environment-file: environment.core.yml
	    environment-name: backend
	    init-shell: bash
	    cache-environment: true
	    cache-downloads: true

      - name: Install pip-only dependencies
        run: micromamba run -n backend pip install -r requirements.extra.txt

      - name: Install PyInstaller
        run: micromamba run -n backend pip install pyinstaller
      
      - name: Build Flask Backend with PyInstaller
        run: |
          micromamba run -n backend pyinstaller --clean --log-level DEBUG --onefile --name web_app web_app.py

          mkdir -p electron-app/public/backend

          if [[ "$RUNNER_OS" == "Windows" ]]; then
             cp dist/web_app.exe electron-app/public/backend/web_app.exe
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
             cp dist/web_app electron-app/public/backend/web_app_macos
          else
             cp dist/web_app electron-app/public/backend/web_app_linux
          fi

        shell: bash

      - name: Test Flask Backend
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            start /B dist\\web_app.exe
            timeout /t 5
          else
            ./dist/web_app &
            BACKEND_PID=$!
            sleep 5
          fi

          curl --fail http://localhost:5000/ || (echo "Flask backend failed" && exit 1)

          if [[ "$RUNNER_OS" != "Windows" ]]; then
            kill $BACKEND_PID
          fi
        shell: bash

      - name: Install Frontend Dependencies
        working-directory: electron-app
        run: npm install

      - name: Build React App
        working-directory: electron-app
        run: npm run build

      - name: Install Playwright and Dependencies
        working-directory: electron-app
        run: |
          npm install --save-dev playwright @playwright/test
          npx playwright install
        shell: bash

      - name: Install Playwright Browser Dependencies (Linux only)
        if: runner.os == 'Linux'
        working-directory: electron-app
        run: npx playwright install-deps

      - name: Run Playwright Tests
        working-directory: electron-app
        run: npm run test:playwright
        env:
          CI: true

      - name: Build Electron App
        working-directory: electron-app
        run: npm run build:electron -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/
            release/
            out/
            *.exe
            *.AppImage
            *.dmg
