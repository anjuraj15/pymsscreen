name: Build pyMSscreen App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-backend:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        continue-on-error: true
        with:
          environment-file: environment.core.yml
          environment-name: backend
          init-shell: bash
          cache-environment: true
          cache-downloads: true
          cache-environment-key: env-${{ matrix.os }}-${{ hashFiles('environment.core.yml') }}
          cache-downloads-key: pkgs-${{ matrix.os }}-${{ hashFiles('environment.core.yml') }}

      - name: Install Python dependencies
        shell: bash
        run: |
          micromamba run -n backend pip install -r requirements.txt
          micromamba run -n backend pip install pyinstaller
          echo "üîç Installing pyopenms per platform..."
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
             micromamba install -n backend -c bioconda -c conda-forge pyopenms
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
             micromamba run -n backend pip install wheels/pyopenms-3.3.0-cp312-cp312-win_amd64.whl             
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
             micromamba run -n backend pip install wheels/pyopenms-3.3.0-cp312-cp312-macosx_14_0_arm64.whl
          else
             echo "‚ö†Ô∏è pyopenms not installed: unknown platform"
          fi

      - name: Check for OpenMS dylibs (macOS only)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "üîç Listing available shared libs in backend env:"
          find "${MAMBA_ROOT_PREFIX:-$HOME/micromamba}/envs/backend/lib" -name "*.dylib" | sort

      - name: Build Flask Binary
        shell: bash
        run: |
          echo "üì¶ Building PyInstaller binary for: ${{ matrix.os }}"
          
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then

            echo "üõ†Ô∏è macOS build with dynamic shared libraries"
            WHEEL_LIB_PATH="${MAMBA_ROOT_PREFIX:-$HOME/micromamba}/envs/backend/lib/python3.12/site-packages/pyopenms"

            ADD_BINARIES=""
            echo "üîç Scanning for dylibs in: $WHEEL_LIB_PATH"
            for lib in "$WHEEL_LIB_PATH"/*.dylib; do
              if [[ -f "$lib" ]]; then
                echo "‚úÖ Adding $(basename "$lib")"
                ADD_BINARIES+=" --add-binary $lib:."
              fi
            done

            OPENMS_DATA_PATH="$WHEEL_LIB_PATH/share/OpenMS"
            echo "üìÅ OpenMS data path: $OPENMS_DATA_PATH"

            echo "üîß Running PyInstaller with collected binaries"
            micromamba run -n backend pyinstaller --clean --log-level DEBUG \
              --onefile --name web_app web_app.py $ADD_BINARIES \
              --add-data "$OPENMS_DATA_PATH:share/OpenMS"

          else
            echo "üõ†Ô∏è Standard build (no extra binaries)"
            micromamba run -n backend pyinstaller --clean --log-level DEBUG \
              --onefile --name web_app web_app.py
          fi

          mkdir -p backend-out
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            mv dist/web_app backend-out/web_app_linux
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            mv dist/web_app backend-out/web_app_macos
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv dist/web_app.exe backend-out/web_app.exe
          fi

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web_app_binary_${{ matrix.os }}
          path: backend-out/

  build-frontend:
    needs: build-backend
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Backend Binary
        uses: actions/download-artifact@v4
        with:
          name: web_app_binary_${{ matrix.os }}
          path: public/backend/

      - name: Make backend binary executable (non-Windows)
        if: matrix.os != 'windows-latest'
        run: chmod +x public/backend/web_app_*     

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ matrix.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-node-

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Install Playwright (required for tests)
        run: npx playwright install --with-deps

      - name: Build React App
        run: npm run build

      - name: Verify Backend Binary for Packaging
        run: |
          echo "üì¶ Backend binary:"
          ls -la public/backend
          file public/backend/web_app* || echo "‚ö†Ô∏è Could not determine binary type"

      - name: Run Playwright Test (backend readiness)
        run: npm run test:playwright

      - name: Build Electron App
        run: npm run build:electron -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/
            release/
            out/
            *.exe
            *.AppImage
            *.dmg
