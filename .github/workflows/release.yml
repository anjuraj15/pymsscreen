name: Build Electron App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-backend:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        continue-on-error: true
        with:
          environment-file: environment.core.yml
          environment-name: backend
          init-shell: bash
          cache-environment: true
          cache-downloads: true
          cache-environment-key: env-${{ runner.os }}-${{ hashFiles('environment.core.yml') }}
          cache-downloads-key: pkgs-${{ runner.os }}-${{ hashFiles('environment.core.yml') }}

      - name: Install pip-only dependencies + pyinstaller + pyopenms
        shell: bash
        run: |
          micromamba run -n backend pip install -r requirements.txt
          micromamba run -n backend pip install pyinstaller

          echo "üîç Installing pyopenms per platform..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "üß¨ Installing pyopenms via conda for Linux..."
            micromamba install -n backend -c bioconda -c conda-forge pyopenms
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "üçé Trying pip install of pyopenms on macOS..."
            micromamba run -n backend pip install pyopenms || echo "‚ö†Ô∏è pip install failed"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "ü™ü Trying pip install of pyopenms on Windows..."
            micromamba run -n backend pip install pyopenms || echo "‚ö†Ô∏è pip install failed"
          fi

      - name: Build Flask Backend Binary
        run: |
          micromamba run -n backend pyinstaller --clean --log-level DEBUG --onefile --name web_app web_app.py
          mkdir -p backend-out
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            mv dist/web_app backend-out/web_app_linux
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            mv dist/web_app backend-out/web_app_macos
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            mv dist/web_app.exe backend-out/web_app.exe
          fi

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web_app_binary_${{ runner.os }}
          path: backend-out/

      - name: Suppress micromamba cleanup error
        if: always()
        shell: bash
        run: |
          echo "üßπ Cleaning micromamba shell (ignore if already deleted)"
          rm -rf /Users/runner/work/_temp/setup-micromamba/micromamba-shell || echo "Already removed"

  build-frontend:
    needs: build-backend
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Backend Binary
        uses: actions/download-artifact@v4
        with:
          name: web_app_binary_${{ runner.os }}
          path: public/backend/

      - name: Make backend binary executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: chmod +x public/backend/*

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: electron-app/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('electron-app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('electron-app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: electron-app

      - name: Build React App
        run: npm run build
        working-directory: electron-app

      - name: Debug App Folder
        run: |
          echo "üìÇ Listing dist/"
          ls -la electron-app/dist || echo "‚ö†Ô∏è dist/ not found yet"
          echo "üìÇ Listing public/backend/"
          ls -la electron-app/public/backend || echo "‚ö†Ô∏è backend/ not found"
          echo "üìÇ Current directory:"
          pwd

      - name: Install Playwright and Browsers
        run: |
          npm install --save-dev playwright @playwright/test
          npx playwright install chromium
        working-directory: electron-app

      - name: Install Playwright Browser Deps (Linux only)
        if: runner.os == 'Linux'
        run: npx playwright install-deps
        working-directory: electron-app

      - name: Run Playwright Tests
        run: npm run test:playwright
        env:
          CI: true
        working-directory: electron-app

      - name: Build Electron App
        run: npm run build:electron -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
        working-directory: electron-app

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            electron-app/dist/
            electron-app/release/
            electron-app/out/
            electron-app/*.exe
            electron-app/*.AppImage
            electron-app/*.dmg
