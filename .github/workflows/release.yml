name: Build Electron App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-backend:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        continue-on-error: true
        with:
          environment-file: environment.core.yml
          environment-name: backend
          init-shell: bash
          cache-environment: true
          cache-downloads: true
          cache-environment-key: env-${{ runner.os }}-${{ hashFiles('environment.core.yml') }}
          cache-downloads-key: pkgs-${{ runner.os }}-${{ hashFiles('environment.core.yml') }}

      - name: Install pip-only dependencies + pyinstaller + pyopenms
        shell: bash
        run: |
          micromamba run -n backend pip install -r requirements.txt
          micromamba run -n backend pip install pyinstaller

          echo "üîç Installing pyopenms per platform..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            micromamba install -n backend -c bioconda -c conda-forge pyopenms
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            micromamba run -n backend pip install pyopenms || echo "‚ö†Ô∏è pip install failed on macOS"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            micromamba run -n backend pip install pyopenms || echo "‚ö†Ô∏è pip install failed on Windows"
          fi

      - name: Build Flask Backend Binary
        run: |
          micromamba run -n backend pyinstaller --clean --log-level DEBUG --onefile --name web_app web_app.py
          mkdir -p backend-out
          echo "üì¶ Backend build output (dist/):"
          ls -la dist/
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            mv dist/web_app backend-out/web_app_linux
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            mv dist/web_app backend-out/web_app_macos
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            mv dist/web_app.exe backend-out/web_app.exe
          fi
          echo "üìÇ Backend-out folder contents:"
          ls -la backend-out/

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web_app_binary_${{ runner.os }}
          path: backend-out/

      - name: Suppress Micromamba Cleanup Error
        if: always()
        shell: bash
        run: |
          echo "üßπ Cleaning micromamba shell manually..."
          rm -f /Users/runner/work/_temp/setup-micromamba/micromamba-shell || true

  build-frontend:
    needs: build-backend
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Backend Binary
        uses: actions/download-artifact@v4
        with:
          name: web_app_binary_${{ runner.os }}
          path: public/backend/

      - name: Make backend binary executable (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        run: chmod +x public/backend/*

      - name: Debug Check backend binary exists
        run: |
          echo "üìÇ Listing public/backend"
          ls -la public/backend || echo "‚ùå No backend binary found!"
          file public/backend/* || echo "‚ö†Ô∏è Cannot determine file type"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci

      - name: Build React App
        run: npm run build

      - name: Debug: Check dist folder
        run: |
          echo "üìÇ Listing dist/"
          ls -la dist || echo "‚ö†Ô∏è dist/ not found"

      - name: Build Electron App
        run: npm run build:electron -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/
            release/
            out/
            *.exe
            *.AppImage
            *.dmg
