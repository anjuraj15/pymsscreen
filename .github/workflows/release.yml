name: Build pyMSscreen App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-platform:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        arch: [x64]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    name: Build (${{ matrix.os }})
    timeout-minutes: 90

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11 Environment
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate || source venv/Scripts/activate || echo "venv active"

          ./venv/bin/pip install -r requirements.txt || ./venv/Scripts/pip.exe install -r requirements.txt
          ./venv/bin/pip install pyinstaller pyinstaller-hooks-contrib || ./venv/Scripts/pip.exe install pyinstaller pyinstaller-hooks-contrib

          echo "🔍 Installing pyopenms and rdkit for platform: ${{ matrix.os }}"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./venv/Scripts/pip.exe install wheels/pyopenms-3.3.0-cp311-cp311-win_amd64.whl
            ./venv/Scripts/pip.exe install wheels/rdkit_pypi-2022.9.5-cp311-cp311-win_amd64.whl

          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            ./venv/bin/pip install wheels/pyopenms-3.3.0-cp311-cp311-macosx_14_0_arm64.whl
            ./venv/bin/pip install wheels/rdkit_pypi-2022.9.5-cp311-cp311-macosx_11_0_arm64.whl

          elif [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            ./venv/bin/pip install wheels/pyopenms-3.3.0-cp311-cp311-manylinux_2_28_x86_64.whl
            ./venv/bin/pip install wheels/rdkit_pypi-2022.9.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
          fi

      - name: Build Backend Binary
        shell: bash
        run: |
          PYINSTALLER_COMMON="--clean --log-level DEBUG --onefile --name web_app web_app.py \
            --collect-all rdkit --collect-all flask --collect-all pandas --collect-all plotly \
            --collect-all numpy --collect-submodules numpy --collect-all waitress"

          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            WHEEL_LIB_PATH="venv/lib/python3.11/site-packages/pyopenms"
            ADD_BINARIES=""
            for lib in "$WHEEL_LIB_PATH"/*.dylib; do
              [[ -f "$lib" ]] && ADD_BINARIES+=" --add-binary $lib:."
            done
            OPENMS_DATA_PATH="$WHEEL_LIB_PATH/share/OpenMS"
            ADD_DATAS="--add-data=${OPENMS_DATA_PATH}:share/OpenMS"
            ./venv/bin/pyinstaller $PYINSTALLER_COMMON $ADD_BINARIES $ADD_DATAS
            mv dist/web_app ./web_app_macos

          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            WHEEL_LIB_PATH="venv/Lib/site-packages/pyopenms"
            ADD_BINARIES=""
            for dll in OpenMS.dll OpenSwathAlgo.dll Qt5Core.dll Qt5Network.dll concrt140.dll \
                         msvcp140.dll msvcp140_1.dll msvcp140_2.dll msvcp140_atomic_wait.dll \
                         msvcp140_codecvt_ids.dll vcruntime140.dll vcruntime140_1.dll vcomp140.dll; do
              DLL_PATH="$WHEEL_LIB_PATH\\$dll"
              [[ -f "$DLL_PATH" ]] && ADD_BINARIES+=" --add-binary $DLL_PATH:."
            done
            OPENMS_DATA_PATH="$WHEEL_LIB_PATH\\share\\OpenMS"
            ADD_DATAS="--add-data=${OPENMS_DATA_PATH};share\\OpenMS"
            ./venv/Scripts/pyinstaller.exe $PYINSTALLER_COMMON $ADD_BINARIES $ADD_DATAS
            mv dist/web_app.exe ./web_app.exe

          elif [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            ./venv/bin/pyinstaller $PYINSTALLER_COMMON --hidden-import pyopenms --collect-all pyopenms
            mv dist/web_app ./web_app_linux
          fi

          echo " Checking for final binary:"
          ls -l ./web_app* || true

          # ✅ DELETE VENV to avoid Electron packaging error
          echo "Cleaning up virtual environment..."
          rm -rf venv


      - name: Preinstall wait-on
        run: npm install -g wait-on  
      
      - name: Launch Backend
        shell: bash
        run: |
          echo " Launching backend on: ${{ matrix.os }}"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BIN="./web_app.exe"
            export OPENMS_DATA_PATH=share\\OpenMS
          
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            BIN="./web_app_macos"
            export OPENMS_DATA_PATH=share/OpenMS
          
          else
            BIN="./web_app_linux"
            export OPENMS_DATA_PATH=share/OpenMS
          fi

          chmod +x "$BIN" || true
          "$BIN" &

          "$BIN" > backend.log 2>&1 &
          BACKEND_PID=$!

          echo "🧾 Backend launched with PID $BACKEND_PID"
          sleep 5

          echo "📄 Dumping backend.log..."
          cat backend.log || true          

          echo " Waiting for backend to start on 127.0.0.1:5000..."
          sleep 2
          npx wait-on --timeout=300000 --interval=5000 http://127.0.0.1:5000 || {
            echo "Backend failed to start within timeout."; exit 1;
          }
          echo "  Backend is live!"

      - name: Install Playwright Test Runner (backend readiness)
        run: npm install -D playwright @playwright/test

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright Test (backend readiness)
        run: npm run test:playwright

      - name: Copy Backend Binary to Electron Public Folder
        shell: bash
        run: |
           echo " Preparing backend binary for Electron..."

           mkdir -p public/backend

               if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
                 if [[ -f "web_app.exe" ]]; then
                    cp web_app.exe public/backend/web_app.exe
                 else
                   echo " web_app.exe not found!"
                   exit 1
                 fi
               elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
                 if [[ -f "web_app_macos" ]]; then
                   cp web_app_macos public/backend/web_app
                 else
                   echo " web_app_macos not found!"
                   exit 1
                 fi
               elif [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
                 if [[ -f "web_app_linux" ]]; then
                    cp web_app_linux public/backend/web_app
                 else
                   echo " web_app_linux not found!"
                   exit 1
                 fi
               fi

               echo "Final contents of public/backend:"
               ls -lh public/backend

      - name: Make backend binary executable
        run: chmod +x public/backend/web_app*

      - name: Build Frontend +  Electron App
        run:  npm run build:app -- --${{ matrix.arch }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Debug Electron Output Structure
        run: |
          echo "Listing dist directory:"
          ls -R dist/

      - name: Smoke Test Electron App EXE
        if: matrix.os == 'windows-latest' 
        shell: bash
        run: |
            echo " Checking win-unpacked for Electron app..."
            ls -lh dist/win-unpacked || true
        
            if [[ ! -f dist/win-unpacked/pymsscreen.exe ]]; then
              echo " EXE not found!"
              exit 1
            fi
        
            echo " Launching Electron EXE in background..."
            ./dist/win-unpacked/pymsscreen.exe > electron-output.log 2>&1 &
            ELECTRON_PID=$!
        
            sleep 10
        
            LOGFILE="$USERPROFILE/AppData/Roaming/pymsscreen/flask-backend.log"
        
            if [[ -f "$LOGFILE" ]]; then
              echo " Backend log found. Checking for errors..."
              if grep -Ei 'error|exception|uncaught|fatal' "$LOGFILE"; then
                echo " Runtime error detected!"
                cat "$LOGFILE"
                kill $ELECTRON_PID || true
                exit 1
              fi
            else
              echo "No backend log. Checking stdout..."
              if grep -Ei 'error|exception|uncaught|fatal' electron-output.log; then
                echo " Electron output error!"
                cat electron-output.log
                kill $ELECTRON_PID || true
                exit 1
              fi
            fi
        
            echo " EXE passed smoke test!"
            kill $ELECTRON_PID || true

      - name: Smoke Test Electron App (non-Windows)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
              echo " Checking if backend binary was bundled correctly..."
          
              if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
                BIN="dist/linux-unpacked/pymsscreen"
              elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
                BIN="dist/mac-unpacked/pymsscreen.app/Contents/MacOS/pymsscreen"
              fi
          
              if [[ ! -f "$BIN" ]]; then
                echo "Electron binary not found at $BIN"
                exit 1
              fi
          
              echo " Running Electron binary..."
              chmod +x "$BIN"
              "$BIN" > test.log 2>&1 &
              PID=$!
              sleep 10
          
              echo " Checking if backend started..."
              if ! curl --silent http://127.0.0.1:5000; then
                echo " Backend did not respond"
                cat test.log
                kill $PID || true
                exit 1
              fi
          
              echo " Electron and backend started correctly!"
              kill $PID || true

      - name: Upload Platform Bundle
        uses: actions/upload-artifact@v4
        with:
          name: pyms-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            public/backend/
            dist/
            release/
            out/
            *.exe
            *.AppImage
            *.dmg

  release:
    needs: build-platform
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: bundles/

      - name: List Bundles
        run: |
          echo "Final App Bundles:"
          ls -R bundles/
